Build started 17/07/2012 9:08:31 PM.
     1>Project "C:\Users\salmonmoose\Dropbox\canton\Canton\Canton.vcxproj" on node 2 (rebuild target(s)).
     1>_PrepareForClean:
         Deleting file "Debug\Canton.lastbuildstate".
       InitializeBuildStatus:
         Creating "Debug\Canton.unsuccessfulbuild" because "AlwaysCreate" was specified.
       ClCompile:
         c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin\CL.exe /c /I"C:\Users\salmonmoose\Dropbox\libs\irrlicht-1.7.3\lib\Win32-visualstudio" /ZI /nologo /W3 /WX- /Od /Oy- /D _MBCS /Gm /EHsc /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Fo"Debug\\" /Fd"Debug\vc100.pdb" /Gd /TP /analyze- /errorReport:prompt ..\canton.cpp ..\marchingcubes.cpp
         marchingcubes.cpp
     1>c:\users\salmonmoose\dropbox\canton\marchingcubes.cpp(416): warning C4244: '=' : conversion from 'double' to 'float', possible loss of data
     1>c:\users\salmonmoose\dropbox\canton\marchingcubes.cpp(373): warning C4101: 'cacheIndex' : unreferenced local variable
     1>c:\users\salmonmoose\dropbox\canton\marchingcubes.cpp(373): warning C4101: 'ntriang' : unreferenced local variable
     1>c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility(2227): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility(2212) : see declaration of 'std::_Copy_impl'
                 c:\users\salmonmoose\dropbox\libs\boost_1_50_0\boost\multi_array\extent_gen.hpp(49) : see reference to function template instantiation '_OutIt std::copy<const boost::detail::multi_array::extent_range<Extent,SizeType>*,boost::detail::multi_array::extent_range<Extent,SizeType>*>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=boost::detail::multi_array::extent_range<boost::detail::multi_array::extent_gen<NumRanges>::index,boost::detail::multi_array::extent_gen<NumRanges>::size_type> ,
                     Extent=boost::detail::multi_array::extent_gen<NumRanges>::index,
                     SizeType=boost::detail::multi_array::extent_gen<NumRanges>::size_type,
                     _InIt=const boost::detail::multi_array::extent_range<boost::detail::multi_array::extent_gen<NumRanges>::index,boost::detail::multi_array::extent_gen<NumRanges>::size_type> 
                 ]
                 c:\users\salmonmoose\dropbox\libs\boost_1_50_0\boost\multi_array\extent_gen.hpp(46) : while compiling class template member function 'boost::detail::multi_array::extent_gen<NumRanges>::extent_gen(const boost::detail::multi_array::extent_gen<0> &,const boost::detail::multi_array::extent_gen<NumRanges>::range &)'
                 with
                 [
                     NumRanges=1
                 ]
                 c:\users\salmonmoose\dropbox\canton\marchingcubes.cpp(383) : see reference to class template instantiation 'boost::detail::multi_array::extent_gen<NumRanges>' being compiled
                 with
                 [
                     NumRanges=1
                 ]
     1>c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility(2801): warning C4996: 'std::_Fill_n': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility(2787) : see declaration of 'std::_Fill_n'
                 c:\users\salmonmoose\dropbox\libs\boost_1_50_0\boost\array.hpp(188) : see reference to function template instantiation 'void std::fill_n<bool*,boost::array<T,N>::size_type,T>(_OutIt,_Diff,const _Ty &)' being compiled
                 with
                 [
                     T=bool,
                     N=3,
                     _OutIt=bool *,
                     _Diff=boost::array<bool,3>::size_type,
                     _Ty=bool
                 ]
                 c:\users\salmonmoose\dropbox\libs\boost_1_50_0\boost\array.hpp(187) : while compiling class template member function 'void boost::array<T,N>::fill(const T &)'
                 with
                 [
                     T=bool,
                     N=3
                 ]
                 c:\users\salmonmoose\dropbox\libs\boost_1_50_0\boost\multi_array\storage_order.hpp(76) : see reference to class template instantiation 'boost::array<T,N>' being compiled
                 with
                 [
                     T=bool,
                     N=3
                 ]
                 c:\users\salmonmoose\dropbox\libs\boost_1_50_0\boost\multi_array\multi_array_ref.hpp(354) : see reference to class template instantiation 'boost::general_storage_order<NumDims>' being compiled
                 with
                 [
                     NumDims=3
                 ]
                 c:\users\salmonmoose\dropbox\libs\boost_1_50_0\boost\multi_array\multi_array_ref.hpp(418) : see reference to class template instantiation 'boost::const_multi_array_ref<T,NumDims,TPtr>' being compiled
                 with
                 [
                     T=double,
                     NumDims=3,
                     TPtr=double *
                 ]
                 c:\users\salmonmoose\dropbox\libs\boost_1_50_0\boost\multi_array.hpp(113) : see reference to class template instantiation 'boost::multi_array_ref<T,NumDims>' being compiled
                 with
                 [
                     T=double,
                     NumDims=3
                 ]
                 c:\users\salmonmoose\dropbox\canton\marchingcubes.cpp(383) : see reference to class template instantiation 'boost::multi_array<T,NumDims>' being compiled
                 with
                 [
                     T=double,
                     NumDims=3
                 ]
         canton.cpp
     1>c:\users\salmonmoose\dropbox\canton\marchingcubes.cpp(416): warning C4244: '=' : conversion from 'double' to 'float', possible loss of data
     1>c:\users\salmonmoose\dropbox\canton\marchingcubes.cpp(373): warning C4101: 'cacheIndex' : unreferenced local variable
     1>c:\users\salmonmoose\dropbox\canton\marchingcubes.cpp(373): warning C4101: 'ntriang' : unreferenced local variable
     1>c:\users\salmonmoose\dropbox\canton\canton.cpp(32): warning C4244: 'argument' : conversion from 'int' to 'irr::f32', possible loss of data
     1>c:\users\salmonmoose\dropbox\canton\canton.cpp(34): warning C4244: 'argument' : conversion from 'int' to 'irr::f32', possible loss of data
     1>c:\users\salmonmoose\dropbox\canton\canton.cpp(34): warning C4244: 'argument' : conversion from 'int' to 'irr::f32', possible loss of data
     1>c:\users\salmonmoose\dropbox\canton\canton.cpp(36): warning C4244: 'argument' : conversion from 'int' to 'irr::f32', possible loss of data
     1>c:\users\salmonmoose\dropbox\canton\canton.cpp(38): warning C4244: 'argument' : conversion from 'int' to 'irr::f32', possible loss of data
     1>c:\users\salmonmoose\dropbox\canton\canton.cpp(38): warning C4244: 'argument' : conversion from 'int' to 'irr::f32', possible loss of data
     1>c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility(2227): warning C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility(2212) : see declaration of 'std::_Copy_impl'
                 c:\users\salmonmoose\dropbox\libs\boost_1_50_0\boost\multi_array\extent_gen.hpp(49) : see reference to function template instantiation '_OutIt std::copy<const boost::detail::multi_array::extent_range<Extent,SizeType>*,boost::detail::multi_array::extent_range<Extent,SizeType>*>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=boost::detail::multi_array::extent_range<boost::detail::multi_array::extent_gen<NumRanges>::index,boost::detail::multi_array::extent_gen<NumRanges>::size_type> ,
                     Extent=boost::detail::multi_array::extent_gen<NumRanges>::index,
                     SizeType=boost::detail::multi_array::extent_gen<NumRanges>::size_type,
                     _InIt=const boost::detail::multi_array::extent_range<boost::detail::multi_array::extent_gen<NumRanges>::index,boost::detail::multi_array::extent_gen<NumRanges>::size_type> 
                 ]
                 c:\users\salmonmoose\dropbox\libs\boost_1_50_0\boost\multi_array\extent_gen.hpp(46) : while compiling class template member function 'boost::detail::multi_array::extent_gen<NumRanges>::extent_gen(const boost::detail::multi_array::extent_gen<0> &,const boost::detail::multi_array::extent_gen<NumRanges>::range &)'
                 with
                 [
                     NumRanges=1
                 ]
                 c:\users\salmonmoose\dropbox\canton\marchingcubes.cpp(383) : see reference to class template instantiation 'boost::detail::multi_array::extent_gen<NumRanges>' being compiled
                 with
                 [
                     NumRanges=1
                 ]
     1>c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility(2801): warning C4996: 'std::_Fill_n': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility(2787) : see declaration of 'std::_Fill_n'
                 c:\users\salmonmoose\dropbox\libs\boost_1_50_0\boost\array.hpp(188) : see reference to function template instantiation 'void std::fill_n<bool*,boost::array<T,N>::size_type,T>(_OutIt,_Diff,const _Ty &)' being compiled
                 with
                 [
                     T=bool,
                     N=3,
                     _OutIt=bool *,
                     _Diff=boost::array<bool,3>::size_type,
                     _Ty=bool
                 ]
                 c:\users\salmonmoose\dropbox\libs\boost_1_50_0\boost\array.hpp(187) : while compiling class template member function 'void boost::array<T,N>::fill(const T &)'
                 with
                 [
                     T=bool,
                     N=3
                 ]
                 c:\users\salmonmoose\dropbox\libs\boost_1_50_0\boost\multi_array\storage_order.hpp(76) : see reference to class template instantiation 'boost::array<T,N>' being compiled
                 with
                 [
                     T=bool,
                     N=3
                 ]
                 c:\users\salmonmoose\dropbox\libs\boost_1_50_0\boost\multi_array\multi_array_ref.hpp(354) : see reference to class template instantiation 'boost::general_storage_order<NumDims>' being compiled
                 with
                 [
                     NumDims=3
                 ]
                 c:\users\salmonmoose\dropbox\libs\boost_1_50_0\boost\multi_array\multi_array_ref.hpp(418) : see reference to class template instantiation 'boost::const_multi_array_ref<T,NumDims,TPtr>' being compiled
                 with
                 [
                     T=double,
                     NumDims=3,
                     TPtr=double *
                 ]
                 c:\users\salmonmoose\dropbox\libs\boost_1_50_0\boost\multi_array.hpp(113) : see reference to class template instantiation 'boost::multi_array_ref<T,NumDims>' being compiled
                 with
                 [
                     T=double,
                     NumDims=3
                 ]
                 c:\users\salmonmoose\dropbox\canton\marchingcubes.cpp(383) : see reference to class template instantiation 'boost::multi_array<T,NumDims>' being compiled
                 with
                 [
                     T=double,
                     NumDims=3
                 ]
         Generating Code...
       ResourceCompile:
         c:\Program Files (x86)\Microsoft SDKs\Windows\v7.0A\bin\rc.exe /l"0x0409" /nologo /fo"Debug\Canton.res" Canton.rc 
       Link:
         c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin\link.exe /ERRORREPORT:PROMPT /OUT:"C:\Users\salmonmoose\Dropbox\canton\Debug\Canton.exe" /NOLOGO kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /MANIFEST /ManifestFile:"Debug\Canton.exe.intermediate.manifest" /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /DEBUG /PDB:"C:\Users\salmonmoose\Dropbox\canton\Debug\Canton.pdb" /SUBSYSTEM:CONSOLE /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:"C:\Users\salmonmoose\Dropbox\canton\Debug\Canton.lib" /MACHINE:X86 Debug\Canton.res
         Debug\canton.obj
         Debug\marchingcubes.obj
     1>canton.obj : warning LNK4229: invalid directive '/subsustem:windows' encountered; ignored
         Canton.vcxproj -> C:\Users\salmonmoose\Dropbox\canton\Debug\Canton.exe
       Manifest:
         c:\Program Files (x86)\Microsoft SDKs\Windows\v7.0A\bin\mt.exe /nologo /verbose /outputresource:"C:\Users\salmonmoose\Dropbox\canton\Debug\Canton.exe;#1" /manifest Debug\Canton.exe.intermediate.manifest
       FinalizeBuildStatus:
         Deleting file "Debug\Canton.unsuccessfulbuild".
         Touching "Debug\Canton.lastbuildstate".
     1>Done Building Project "C:\Users\salmonmoose\Dropbox\canton\Canton\Canton.vcxproj" (rebuild target(s)).

Build succeeded.

Time Elapsed 00:00:18.65
